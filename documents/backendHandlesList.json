{
  "key": "backendHandlesList",
  "value": [
    {
      "id": "BAC-001",
      "category": "システム",
      "handleName": "ログイン処理",
      "description": "ユーザーIDとパスワードを検証し、認証トークンを発行する。",
      "handleProcedure": "ユーザーIDとパスワードを受け取り、データベースのユーザー情報を検証する。検証に成功した場合、認証トークンを生成し、クライアントに返す。失敗した場合はエラーレスポンスを返す。",
      "fileName": "auth/login.ts",
      "relatedScreen": "SCR-001",
      "relatedFrontendCode": "{\"code\": \"import { render, screen, fireEvent } from '@testing-library/react';\nimport Login from '@/pages/login';\n\ndescribe('Login Component Test', () => {\n  test('renders login form with user ID, password fields, and login button', () => {\n    render(<Login />);\n    expect(screen.getByLabelText('ユーザーID')).toBeInTheDocument();\n    expect(screen.getByLabelText('パスワード')).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: 'ログイン' })).toBeInTheDocument();\n  });\n\n  test('calls login function with correct user ID and password on button click', async () => {\n    const mockLogin = jest.fn();\n    render(<Login loginFunc={mockLogin} />);\n\n    fireEvent.change(screen.getByLabelText('ユーザーID'), { target: { value: 'testuser' } });\n    fireEvent.change(screen.getByLabelText('パスワード'), { target: { value: 'password' } });\n    fireEvent.click(screen.getByRole('button', { name: 'ログイン' }));\n\n    expect(mockLogin).toHaveBeenCalledWith('testuser', 'password');\n  });\n\n  test('displays error message when login fails', async () => {\n    const mockLogin = jest.fn().mockRejectedValue(new Error('ログイン失敗'));\n    render(<Login loginFunc={mockLogin} />);\n\n    fireEvent.change(screen.getByLabelText('ユーザーID'), { target: { value: 'testuser' } });\n    fireEvent.change(screen.getByLabelText('パスワード'), { target: { value: 'password' } });\n    fireEvent.click(screen.getByRole('button', { name: 'ログイン' }));\n\n    // エラーメッセージが表示されるか確認\n    expect(await screen.findByText('ログイン失敗')).toBeVisible();\n\n  });\n});\"}"
    },
    {
      "id": "BAC-002",
      "category": "契約管理",
      "handleName": "契約更新案内書類生成",
      "description": "契約IDを基に契約更新案内書類を生成する処理。",
      "handleProcedure": "契約IDを受け取り、契約情報、顧客情報、商品情報をデータベースから取得する。取得した情報を基に契約更新案内書類を生成し、PDF形式などで保存する。",
      "fileName": "contracts/renewal_notice.ts",
      "relatedScreen": "SCR-011",
      "relatedFrontendCode": "{\"code\": \"import { render, screen, fireEvent } from '@testing-library/react';\nimport RenewalNotice from '@/pages/contracts/[contract_id]/renewal_notice';\n\n// モックデータ\nconst mockData = {\n  subscription_id: 1,\n  contract_no: \\\"C-001\\\",\n  customer_id: 1,\n  product_code: \\\"P-001\\\",\n  // ... other data\n};\n\n// ヘッダーコンポーネントのモック\njest.mock('@/components/Header', () => () => <div>ヘッダー</div>);\n\ndescribe('契約更新案内作成画面', () => {\n  beforeEach(() => {\n    // fetch のモックを設定\n    fetch.mockResolvedValueOnce({\n      ok: true,\n      json: () => Promise.resolve(mockData),\n    });\n  });\n\n  it('契約更新案内情報が正しく表示される', async () => {\n    render(<RenewalNotice contract_id=\\\"1\\\" />); // contract_id を渡す\n\n    // データの読み込みを待つ\n    await screen.findByText(\\\"C-001\\\");\n\n    // 契約情報が表示されていることを確認\n    expect(screen.getByText(\\\"C-001\\\")).toBeInTheDocument();\n    // ... other data assertions\n    expect(screen.getByText(\\\"ヘッダー\\\")).toBeInTheDocument();\n  });\n\n  it('作成ボタンクリックで更新案内が作成される', async () => {\n    render(<RenewalNotice contract_id=\\\"1\\\" />);\n    await screen.findByText(\\\"C-001\\\");\n\n    // 作成ボタンのクリックイベントをモック\n    const createButton = screen.getByRole('button', { name: /作成/i });\n    fireEvent.click(createButton);\n\n    // 更新案内作成処理が呼び出されたことを確認\n    // 実際にはAPI呼び出しなどが行われるため、その部分のモックが必要\n  });\n});\"}"
    },
    {
      "id": "BAC-003",
      "category": "請求管理",
      "handleName": "請求書自動生成",
      "description": "契約情報に基づき、請求書を自動生成する。",
      "handleProcedure": "契約ID、請求方式（前金、都度、完納）を受け取り、データベースから契約情報、顧客情報を取得し、請求書データを生成する。請求書データをデータベースに保存し、請求書IDを発行する。",
      "fileName": "billing/generate_invoice.ts",
      "relatedScreen": "SCR-048",
      "relatedFrontendCode": "{\"code\": \"import { render, screen, fireEvent } from '@testing-library/react';\nimport { jest } from '@jest/globals';\nimport axios from 'axios';\nimport Generate from '@/pages/billing/generate';\n\n// モック\njest.mock('axios');\nconst mockedAxios = axios as jest.Mocked<typeof axios>;\n\ndescribe('請求書自動生成画面', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('コンポーネントが正しくレンダリングされる', () => {\n    render(<Generate />); // モック化したコンポーネントをレンダリング\n    expect(screen.getByText('請求書自動生成画面')).toBeInTheDocument(); // 画面タイトルが存在することを確認\n  });\n\n  it('請求書生成ボタンがクリックされたときにAPIリクエストが送信される', async () => {\n    // モックデータ\n    const mockResponse = { data: { message: '請求書が生成されました' } };\n    mockedAxios.post.mockResolvedValue(mockResponse);\n\n    render(<Generate />);\n\n    // ボタンクリックをシミュレート\n    fireEvent.click(screen.getByText('請求書生成'));\n\n    // APIリクエストが正しいエンドポイントに送信されたことを確認\n    expect(mockedAxios.post).toHaveBeenCalledWith('/api/billings', {});\n\n    // 請求書生成成功メッセージが表示されることを確認\n    expect(await screen.findByText('請求書が生成されました')).toBeVisible();\n  });\n\n  it('キャンセルボタンがクリックされたときに前の画面に戻る', () => {\n    render(<Generate />);\n\n    const mockRouter = {\n      back: jest.fn()\n    };\n    jest.mock('next/navigation', () => ({\n      useRouter: () => mockRouter,\n    }));\n\n    fireEvent.click(screen.getByText('キャンセル'));\n    expect(mockRouter.back).toHaveBeenCalledTimes(1);\n  });\n\n  describe('Header.tsx', () => {\n    it('Header コンポーネントが表示される', () => {\n      render(<Generate />);\n      expect(screen.getByRole('heading', { name: 'ヘッダー' })).toBeInTheDocument();\n    });\n  });\n\n  describe('SideMenu.tsx', () => {\n    it('SideMenu コンポーネントが表示される', () => {\n      render(<Generate />);\n      expect(screen.getByRole('navigation', { name: 'サイドメニュー' })).toBeInTheDocument();\n    });\n  });\n});\n\"}"
    },
    {
      "id": "BAC-004",
      "category": "請求管理",
      "handleName": "入金データ自動消込",
      "description": "入金データを自動で消込処理する。",
      "handleProcedure": "銀行振込CSVデータを受け取り、未入金情報をデータベースから取得する。CSVデータと未入金情報を比較し、消込処理を行う。消込結果をデータベースに保存し、消込結果を返す。",
      "fileName": "billing/payment_reconciliation.ts",
      "relatedScreen": "SCR-050",
      "relatedFrontendCode": "{\"code\": \"import { render, screen, fireEvent } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport Reconcile from '@/pages/billing/reconcile';\n\n// モック\njest.mock('axios');\nconst mockedAxios = axios as jest.Mocked<typeof axios>;\n\ndescribe('入金データ自動消込画面', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('画面が表示されること', () => {\n    render(<Reconcile />);\n    expect(screen.getByText('入金データ自動消込画面')).toBeInTheDocument();\n  });\n\n  it('入金データCSVファイルがアップロードできること', async () => {\n    render(<Reconcile />);\n    const fileInput = screen.getByLabelText('CSVファイルを選択') as HTMLInputElement;\n    const file = new File([''], 'test.csv', { type: 'text/csv' });\n    fireEvent.change(fileInput, { target: { files: [file] } });\n    // ファイルがアップロードされたことを確認\n    expect(fileInput.files?.[0].name).toBe('test.csv');\n  });\n\n  it('消込実行ボタンがクリックできること', async () => {\n    render(<Reconcile />);\n    const button = screen.getByRole('button', { name: '消込実行' });\n    fireEvent.click(button);\n    // API 呼び出しが実行されたことを確認\n  });\n\n  it('キャンセルボタンがクリックできること', async () => {\n    render(<Reconcile />);\n    const button = screen.getByRole('button', { name: 'キャンセル' });\n    fireEvent.click(button);\n    // 画面遷移が実行されたことを確認\n  });\n\n  it('データ取得処理が成功した場合、データが表示されること', async () => {\n    // モックデータをセット\n    mockedAxios.get.mockResolvedValue({ data: [], status: 200 });\n    render(<Reconcile />);    \n    // データが表示されていることを確認\n  });\n\n  it('データ取得処理が失敗した場合、エラーメッセージが表示されること', async () => {\n    mockedAxios.get.mockRejectedValue({ message: 'エラーが発生しました', status: 500 });\n    render(<Reconcile />);\n    // エラーメッセージが表示されていることを確認\n  });\n\n\n  describe('Header.tsx と SideMenu.tsx のテスト', () => {\n    it('Header.tsx が表示されること', () => {\n      render(<Reconcile />);\n      // Header.tsx に含まれる要素の存在を確認\n    });\n\n    it('SideMenu.tsx が表示されること', () => {\n      render(<Reconcile />);\n      // SideMenu.tsx に含まれる要素の存在を確認\n    });\n  });\n});\n\"}"
    },
    {
      "id": "BAC-005",
      "category": "レポートとデータ出力",
      "handleName": "レポートデータ出力",
      "description": "契約者一覧表、売上一覧表、入金集計表などのレポートをCSV形式で出力する。",
      "handleProcedure": "レポート種別と出力条件を受け取り、データベースから必要な情報を取得する。取得したデータを基にCSV形式のレポートデータを生成し、クライアントに返す。",
      "fileName": "reports/generate_csv.ts",
      "relatedScreen": "SCR-017",
      "relatedFrontendCode": "{\"code\": \"import { render, screen, fireEvent } from '@testing-library/react';\nimport { jest } from '@jest/globals';\nimport ReportsOutput from '@/pages/reports/output';\n\ndescribe('ReportsOutput Component', () => {\n  const mockHandleSubmit = jest.fn();\n\n  beforeEach(() => {\n    render(<ReportsOutput onSubmit={mockHandleSubmit} />);  // onSubmit prop\n  });\n\n  it('renders Header component', () => {\n    // Header component is expected to be rendered within ReportsOutput\n    expect(screen.getByRole('banner')).toBeInTheDocument();\n  });\n\n  it('レポート選択メニューが存在する', () => {\n    expect(screen.getByRole('combobox', { name: /レポート種別/i })).toBeInTheDocument();\n  });\n\n  it('出力条件設定フォームが存在する', () => {\n    expect(screen.getByRole('textbox', { name: /開始日/i })).toBeInTheDocument();\n    expect(screen.getByRole('textbox', { name: /終了日/i })).toBeInTheDocument();\n    // Add more input fields as needed based on your actual form\n  });\n\n  it('出力ボタンが存在し、クリックできる', () => {\n    const submitButton = screen.getByRole('button', { name: /出力/i });\n    expect(submitButton).toBeInTheDocument();\n    fireEvent.click(submitButton);\n    expect(mockHandleSubmit).toHaveBeenCalledTimes(1);\n  });\n\n  describe('レポート選択メニューの変更', () => {\n    it('契約者一覧を選択できる', () => {\n      const select = screen.getByRole('combobox', { name: /レポート種別/i });\n      fireEvent.change(select, { target: { value: '契約者一覧' } });\n      expect(select.value).toBe('契約者一覧');\n    });\n\n    // 他のレポート種別についても同様のテストを追加\n  });\n\n  // 出力条件設定フォームへの入力とバリデーションのテスト\n  describe('出力条件設定フォームのバリデーション', () => {\n    it('開始日と終了日の入力とバリデーション', () => {\n      const startDateInput = screen.getByRole('textbox', { name: /開始日/i });\n      const endDateInput = screen.getByRole('textbox', { name: /終了日/i });\n\n      fireEvent.change(startDateInput, { target: { value: '2024-07-20' } });\n      fireEvent.change(endDateInput, { target: { value: '2024-07-25' } });\n\n      expect(startDateInput.value).toBe('2024-07-20');\n      expect(endDateInput.value).toBe('2024-07-25');\n\n      // ここにバリデーションのテストを追加 (例: 終了日が開始日より前だとエラー)\n    });\n\n    // 他の入力フィールドについても同様のテストを追加\n  });\n});\n\"}"
    },
    {
      "id": "BAC-006",
      "category": "レポートとデータ出力",
      "handleName": "ラベルデータ出力",
      "description": "発送用ラベルデータを出力する。",
      "handleProcedure": "出力条件を受け取り、データベースから必要な情報を取得する。取得したデータを基にラベルデータを生成し、クライアントに返す。",
      "fileName": "reports/generate_label.ts",
      "relatedScreen": "SCR-018",
      "relatedFrontendCode": "{\"code\": \"import { render, screen, fireEvent } from '@testing-library/react';\nimport { jest } from '@jest/globals';\nimport axios from 'axios';\nimport LabelOutput from '@/pages/reports/label_output';\n\n// Fetch のモック\nglobal.fetch = jest.fn(() => Promise.resolve({\n  json: () => Promise.resolve({}),\n  text: () => Promise.resolve(\\\"\\\"),\n  ok: true,\n  status: 200,\n  statusText: \\\"OK\\\",\n})) as jest.Mock;\n\n// Axios のモック\njest.mock('axios');\nconst mockedAxios = axios as jest.Mocked<typeof axios>;\n\n// Next.js の Router モック\nconst mockRouter = {\n  push: jest.fn(),\n  replace: jest.fn(),\n  back: jest.fn(),\n  forward: jest.fn(),\n  refresh: jest.fn(),\n  prefetch: jest.fn(),\n};\n\njest.mock('next/navigation', () => ({\n  useRouter: () => mockRouter,\n  usePathname: jest.fn(),\n  useSearchParams: jest.fn(() => new URLSearchParams()),\n}));\n\n// グローバル変数の設定\ndeclare global {\n  namespace NodeJS {\n    interface Global {\n      fetch: jest.Mock;\n      mockNextRouter: typeof mockRouter;\n    }\n  }\n  var mockNextRouter: typeof mockRouter;\n  var axios: typeof mockedAxios;\n}\n\nglobal.mockNextRouter = mockRouter;\nglobal.axios = mockedAxios;\n\n// テスト前の共通セットアップ\nbeforeEach(() => {\n  jest.clearAllMocks();\n});\n\ndescribe('ラベルデータ出力画面', () => {\n  it('Headerコンポーネントが表示される', () => {\n    render(<LabelOutput />);    \n    expect(screen.getByRole('heading', { name: '定期購読管理システム' })).toBeTruthy();\n  });\n\n  it('出力ボタンをクリックできる', async () => {\n    render(<LabelOutput />);\n    const submitButton = screen.getByRole('button', { name: '出力' });\n    fireEvent.click(submitButton);\n    // Axiosを使った出力処理が呼ばれたことを確認\n    expect(mockedAxios.post).toHaveBeenCalledTimes(1);\n  });\n});\"}"
    },
    {
      "id": "BAC-007",
      "category": "レポートとデータ出力",
      "handleName": "発送データ出力",
      "description": "発送データを出力する。",
      "handleProcedure": "出力条件を受け取り、データベースから必要な情報を取得する。取得したデータを基に発送データを生成し、クライアントに返す。",
      "fileName": "reports/generate_shipping.ts",
      "relatedScreen": "SCR-019",
      "relatedFrontendCode": "{\"code\": \"import { render, screen, fireEvent } from '@testing-library/react';\nimport { jest } from '@jest/globals';\nimport axios from 'axios';\nimport ShippingOutput from '@/pages/reports/shipping_output';\n\n// ヘッダーコンポーネントのモック\njest.mock('@/components/common/Header', () => {\n  return () => <div>Header Mock</div>;\n});\n\n// Axios のモック設定\nconst mockedAxios = axios as jest.Mocked<typeof axios>;\nbeforeEach(() => {\n  mockedAxios.get.mockResolvedValue({ data: [] });\n});\n\ndescribe('発送データ出力画面', () => {\n  test('コンポーネントがレンダリングされる', () => {\n    render(<ShippingOutput />);  // モックヘッダーとモックデータを使用\n    expect(screen.getByText('Header Mock')).toBeInTheDocument(); // モックヘッダーが表示される\n  });\n\n  test('出力ボタンクリックでデータ取得が実行される', async () => {\n    render(<ShippingOutput />); // モックヘッダーとモックデータを使用\n\n    // 出力ボタンクリックをシミュレート\n    fireEvent.click(screen.getByRole('button', { name: /出力/ }));\n\n    // モック関数が呼ばれたことを確認\n    expect(mockedAxios.get).toHaveBeenCalled();\n  });\n});\"}"
    },
    {
      "id": "BAC-008",
      "category": "レポートとデータ出力",
      "handleName": "定期元帳出力",
      "description": "定期元帳をデータ出力する。",
      "handleProcedure": "出力条件を受け取り、データベースから必要な情報を取得する。取得したデータを基に定期元帳データを生成し、クライアントに返す。",
      "fileName": "reports/generate_ledger.ts",
      "relatedScreen": "SCR-020",
      "relatedFrontendCode": "{\"code\": \"import { render, screen, fireEvent } from '@testing-library/react';\nimport { jest } from '@jest/globals';\nimport axios from 'axios';\nimport LedgerOutput from '@/pages/reports/ledger_output';\n\n// モック\njest.mock('axios');\nconst mockedAxios = axios as jest.Mocked<typeof axios>;\n\n// ヘッダーコンポーネント（ダミー）\nconst Header = () => <div>ヘッダー</div>;\n\ndescribe('定期元帳出力画面', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('画面が正しくレンダリングされる', () => {\n    render(<LedgerOutput />);  // Header コンポーネントをpropsで渡す\n    expect(screen.getByText('定期元帳出力画面')).toBeInTheDocument(); \n    expect(screen.getByText('ヘッダー')).toBeInTheDocument();\n  });\n\n  it('出力ボタンクリックでAPIがコールされる', async () => {\n    // Axios のモックを設定\n    mockedAxios.post.mockResolvedValueOnce({ data: {}, status: 200 });\n\n    render(<LedgerOutput />);  // Header コンポーネントをpropsで渡す\n\n    fireEvent.click(screen.getByText('出力'));\n    // API コールの確認\n    expect(mockedAxios.post).toHaveBeenCalledTimes(1); \n  });\n\n  it('APIコール成功時にメッセージが表示される', async () => {\n    mockedAxios.post.mockResolvedValueOnce({ data: {}, status: 200 });\n\n    render(<LedgerOutput />);  // Header コンポーネントをpropsで渡す\n\n    fireEvent.click(screen.getByText('出力'));\n    // 成功メッセージの確認\n    // （実装によりメッセージが変化するため、適切なメッセージに修正）\n    // expect(await screen.findByText('出力に成功しました')).toBeVisible(); \n  });\n\n  it('APIコール失敗時にエラーメッセージが表示される', async () => {\n    mockedAxios.post.mockRejectedValueOnce({ message: 'エラーが発生しました' });\n\n    render(<LedgerOutput />);  // Header コンポーネントをpropsで渡す\n\n    fireEvent.click(screen.getByText('出力'));\n    // （実装によりメッセージが変化するため、適切なメッセージに修正）\n    // expect(await screen.findByText('エラーが発生しました')).toBeVisible();\n  });\n\n  it('出力条件設定フォームの値が正しく設定、取得できる', async () => {\n    render(<LedgerOutput />); // Header コンポーネントをpropsで渡す\n\n    // テストに必要な実装を追加\n    // 例: 出力開始日、出力終了日などの入力フィールド\n  });\n});\"}"
    },
    {
      "id": "BAC-009",
      "category": "商品管理",
      "handleName": "商品CSV出力",
      "description": "商品情報をCSV形式で出力する。",
      "handleProcedure": "出力条件を受け取り、データベースから商品情報を取得する。取得した情報を基にCSV形式のデータを作成し、クライアントに返す。",
      "fileName": "products/export_csv.ts",
      "relatedScreen": "SCR-083",
      "relatedFrontendCode": "{\"code\": \"import { render, screen, fireEvent } from '@testing-library/react';\nimport { jest } from '@jest/globals';\nimport ProductCSV from '@/pages/product/csv';\n\ndescribe('商品CSV出力画面', () => {\n  test('HeaderとSideMenuコンポーネントが表示される', () => {\n    render(<ProductCSV />);  \n    expect(screen.getByRole('heading', { name: 'ヘッダー' })).toBeInTheDocument(); // Header.tsx\n    expect(screen.getByRole('navigation', { name: 'サイドメニュー' })).toBeInTheDocument(); // SideMenu.tsx\n  });\n\n  test('ダウンロードボタンのクリックでCSVダウンロード処理が開始される', async () => {\n    // モック関数\n    const mockDownloadCSV = jest.fn();\n    render(<ProductCSV downloadCSV={mockDownloadCSV} />); \n    fireEvent.click(screen.getByRole('button', { name: 'ダウンロード' }));\n    expect(mockDownloadCSV).toHaveBeenCalledTimes(1);\n  });\n\n  test('CSVダウンロード処理中のローディング表示', () => {\n    // モック関数\n    let isLoading = true;\n    const setIsLoading = (value: boolean) => {\n      isLoading = value;\n    };\n    render(<ProductCSV isLoadingCSV={isLoading} setIsLoadingCSV={setIsLoading} />); \n    expect(screen.getByRole('progressbar', { name: '処理中...' })).toBeInTheDocument();\n\n    isLoading = false;\n    render(<ProductCSV isLoadingCSV={isLoading} setIsLoadingCSV={setIsLoading} />); \n    expect(screen.queryByRole('progressbar')).not.toBeInTheDocument(); // ローディング表示が消えている\n  });\n\n  test('エラーメッセージが表示される', () => {\n    const errorMessage = 'エラーが発生しました。';\n    render(<ProductCSV downloadError={errorMessage} />);\n    expect(screen.getByRole('alert')).toHaveTextContent(errorMessage);\n  });\n\n\n  describe('出力条件設定フォーム', () => {\n    test('商品IDの入力', () => {\n      render(<ProductCSV />);\n      const productIdInput = screen.getByLabelText('商品ID');\n      fireEvent.change(productIdInput, { target: { value: '123' } });\n      expect(productIdInput).toHaveValue('123');\n    });\n\n    test('商品名の入力', () => {\n      render(<ProductCSV />);\n      const productNameInput = screen.getByLabelText('商品名');\n      fireEvent.change(productNameInput, { target: { value: 'テスト商品' } });\n      expect(productNameInput).toHaveValue('テスト商品');\n    });\n  });\n});\"}"
    },
    {
      "id": "BAC-010",
      "category": "アラート機能",
      "handleName": "アラート通知",
      "description": "発行遅延、未発行、都度請求時の未請求、未消込入金などの状況を監視し、アラートを通知する。",
      "handleProcedure": "アラート条件を基に、データベースの契約情報、発行スケジュール、請求情報、入金情報を監視する。設定された条件に合致した場合、アラート情報をデータベースに保存し、設定された通知先に通知を行う。",
      "fileName": "alerts/notification.ts",
      "relatedScreen": "SCR-032",
      "relatedFrontendCode": "{\"code\": \"import { render, screen, act } from '@testing-library/react';\nimport BillingSchedule from '@/pages/BillingSchedule';\nimport { jest } from '@jest/globals';\n\n// モック\njest.mock('axios');\nconst mockedAxios = axios as jest.Mocked<typeof axios>;\njest.mock('@/components/Header', () => () => <div>ヘッダーモック</div>);\njest.mock('@/components/Sidebar', () => () => <div>サイドバーモック</div>);\n\ndescribe('BillingSchedule', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('請求スケジュール一覧が表示されること', async () => {\n    mockedAxios.get.mockResolvedValue({\n      data: [\n        { pricing_id: 1, subscription_id: 1, set_price: 1000, set_quantity: 1, total_amount: 1000, tax_amount: 100, tax_inclusive_total: 1100 },\n        { pricing_id: 2, subscription_id: 2, set_price: 2000, set_quantity: 2, total_amount: 4000, tax_amount: 400, tax_inclusive_total: 4400 },\n      ],\n    });\n\n    render(<BillingSchedule />);  \n    await act(() => Promise.resolve());\n\n    expect(screen.getByText('ヘッダーモック')).toBeInTheDocument();\n    expect(screen.getByText('サイドバーモック')).toBeInTheDocument();\n    expect(screen.getByText('1')).toBeInTheDocument();\n    expect(screen.getByText('1000')).toBeInTheDocument();\n    expect(screen.getByText('2')).toBeInTheDocument();\n    expect(screen.getByText('4000')).toBeInTheDocument();\n  });\n\n  it('データ取得エラー時にエラーメッセージが表示されること', async () => {\n    mockedAxios.get.mockRejectedValue(new Error('APIエラー'));\n\n    render(<BillingSchedule />);\n    await act(() => Promise.resolve());\n\n    expect(screen.getByText('ヘッダーモック')).toBeInTheDocument();\n    expect(screen.getByText('サイドバーモック')).toBeInTheDocument();\n    expect(screen.getByRole('alert')).toHaveTextContent('エラーが発生しました。');\n  });\n});\n\"}"
    }
  ]
}
